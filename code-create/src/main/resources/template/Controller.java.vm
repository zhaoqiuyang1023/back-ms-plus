package ${package}.controller;

import java.util.Arrays;
import java.util.Map;

import java.util.Arrays;
import java.util.Map;

import com.zqy.ms.user.util.LayerData;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import ${package}.entity.${className};
import ${package}.service.${className}Service;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${pathName}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;




    @GetMapping("list")
    public String list() {
        return "${pathName}/list";

    }

    @PostMapping("list")
    @ResponseBody
    public LayerData<${className}> list(@RequestParam(value = "page", defaultValue = "1") Integer page,
                                   @RequestParam(value = "limit", defaultValue = "10") Integer limit,
                                   ServletRequest request) {
        LayerData<${className}> layerData = new LayerData<>();
        QueryWrapper<${className}> queryWrapper = new QueryWrapper<>();

        queryWrapper.orderByDesc("update_date");
        IPage<${className}> userPage = ${classname}Service.page(new Page<>(page, limit), queryWrapper);
        layerData.setCount(userPage.getTotal());
        layerData.setData(userPage.getRecords());
        return layerData;
    }

    @GetMapping("/add")
    public String add(Model model) {
        return "${pathName}/add";
    }

    @GetMapping("/edit/{id}")
    public String edit(@PathVariable("id") Long id, Model model) {

        ${className} ${classname} = ${classname}Service.getById(id);
        model.addAttribute("${classname}", ${classname});
        return "${pathName}/edit";
    }

    @PostMapping("save")
    @ResponseBody
    public RestResponse add(@RequestBody ${className} ${classname}) {
        log.info("" + role);
        if (StringUtils.isBlank(${classname}.getName())) {
            return RestResponse.failure("名称不能为空");
        }
        ${className} exist${className} = ${classname}Service.getOne(new QueryWrapper<${className}>().eq("name", role.getName()));
        if (exist${className} != null) {
            //如是修改
            if (StringUtils.isNotBlank(exist${className}.getId())) {
                //两条的id不一样
                if (!exist${className}.getId().equals(exist${className}.getId())) {
                    return RestResponse.failure("名称已存在");
                }
            }
            //如果是添加
            else {
                return RestResponse.failure("名称已存在");
            }
        }
        ${classname}.setUpdateDate(new Date());
        ${classname}Service.saveOrUpdate(${classname});
        return RestResponse.success("操作成功");
    }

    @PostMapping("delete")
    @ResponseBody
    public RestResponse delete(@RequestParam(value = "id", required = false) String id) {
            ${classname}Service.removeById(id);
        return RestResponse.success("操作成功");
    }




}
